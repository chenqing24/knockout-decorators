{"version":3,"file":"knockout-decorators.esm.js","sources":["../src/common-functions.ts","../src/event-property.ts","../src/property-extenders.ts","../src/observable-property.ts","../src/observable-array.ts","../src/knockout-decorators.ts"],"sourcesContent":["/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\n\r\nconst prefix = \"__ko_decorators_\";\r\n\r\nexport let PATCHED_KEY: string | symbol = prefix + \"patched__\";\r\nexport let EXTENDERS_KEY: string | symbol = prefix + \"extenders__\";\r\nexport let SUBSCRIPTIONS_KEY: string | symbol = prefix + \"subscriptions__\";\r\n\r\nif (typeof Symbol !== \"undefined\") {\r\n  PATCHED_KEY = Symbol(PATCHED_KEY);\r\n  EXTENDERS_KEY = Symbol(EXTENDERS_KEY);\r\n  SUBSCRIPTIONS_KEY = Symbol(SUBSCRIPTIONS_KEY);\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const ArrayPrototype = Array.prototype;\r\n\r\nexport function defineProperty(instance: Object, key: any, descriptor: PropertyDescriptor) {\r\n  descriptor.configurable = true;\r\n  Object.defineProperty(instance, key, descriptor);\r\n}\r\n\r\nexport const extendObject = ko.utils.extend;\r\nexport const objectForEach = ko.utils.objectForEach;\r\nexport const isArray = Array.isArray.bind(Array);\r\nexport const getPrototypeOf = Object.getPrototypeOf.bind(Object);\r\nexport const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor.bind(Object);\r\nexport const hasOwnProperty = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\r\nexport const arraySlice = Function.prototype.call.bind(ArrayPrototype.slice);\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { arraySlice, defineProperty } from \"./common-functions\";\r\nimport { EventType } from \"./knockout-decorators\";\r\n\r\nexport function defineEventProperty(instance: Object, key: string | symbol) {\r\n  const subscribable = new ko.subscribable<any[]>();\r\n\r\n  const event: EventType = function () {\r\n    const eventArgs = arraySlice(arguments);\r\n    subscribable.notifySubscribers(eventArgs);\r\n  } as any;\r\n\r\n  event.subscribe = function (callback: Function) {\r\n    return subscribable.subscribe(function (eventArgs: any[]) {\r\n      callback.apply(null, eventArgs);\r\n    });\r\n  };\r\n\r\n  defineProperty(instance, key, {\r\n    value: event,\r\n  });\r\n\r\n  return event;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport { EXTENDERS_KEY, extendObject, hasOwnProperty, objectForEach } from \"./common-functions\";\r\n\r\ntype Extender = Object | Function;\r\n\r\ninterface ExtendersDictionary {\r\n  [propName: string]: Extender[];\r\n}\r\n\r\nexport function applyExtenders(\r\n  instance: Object, key: string | symbol,\r\n  target: ko.Observable<any> | ko.Computed<any>,\r\n) {\r\n  const dictionary = instance[EXTENDERS_KEY] as ExtendersDictionary;\r\n  const extenders = dictionary && dictionary[key as any];\r\n  if (extenders) {\r\n    extenders.forEach((extender) => {\r\n      const koExtender = extender instanceof Function\r\n        ? extender.call(instance) : extender;\r\n\r\n      target = target.extend(koExtender);\r\n    });\r\n  }\r\n  return target;\r\n}\r\n\r\nexport function defineExtenders(\r\n  prototype: Object, key: string | symbol,\r\n  extendersOrFactory: Object | Function,\r\n) {\r\n  let dictionary = prototype[EXTENDERS_KEY] as ExtendersDictionary;\r\n  // if there is no ExtendersDictionary or ExtendersDictionary lives in base class prototype\r\n  if (!hasOwnProperty(prototype, EXTENDERS_KEY)) {\r\n    // clone ExtendersDictionary from base class prototype or create new ExtendersDictionary\r\n    prototype[EXTENDERS_KEY] = dictionary = extendObject({}, dictionary) as ExtendersDictionary;\r\n    // clone Extenders arrays for each property key\r\n    objectForEach(dictionary, (existingKey, extenders) => {\r\n      dictionary[existingKey] = [...extenders];\r\n    });\r\n  }\r\n  // get existing Extenders array or create new array\r\n  const currentExtenders = dictionary[key as any] || (dictionary[key as any] = []);\r\n  // add new Extenders\r\n  currentExtenders.push(extendersOrFactory);\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n  defineProperty, getPrototypeOf, hasOwnProperty, isArray, objectForEach, PATCHED_KEY,\r\n} from \"./common-functions\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\nexport function defineObservableProperty(\r\n  instance: Object, key: string | symbol, value: any, deep: boolean, expose: boolean,\r\n) {\r\n  const observable = applyExtenders(instance, key, ko.observable());\r\n\r\n  let setter = observable as any;\r\n\r\n  if (deep) {\r\n    setter = function (newValue: any) {\r\n      observable(prepareDeepValue(newValue, expose));\r\n    };\r\n  }\r\n\r\n  defineProperty(instance, key, {\r\n    enumerable: true,\r\n    get: observable,\r\n    set: setter,\r\n  });\r\n  if (expose) {\r\n    defineProperty(instance, \"_\" + String(key), {\r\n      value: observable,\r\n    });\r\n  }\r\n\r\n  setter(value);\r\n}\r\n\r\nexport function prepareDeepValue(value: any, expose: boolean) {\r\n  if (typeof value === \"object\") {\r\n    if (isArray(value) || value === null) {\r\n      // value is Array or null\r\n      return value;\r\n    } else if (hasOwnProperty(value, \"constructor\")) {\r\n      // there is redefined own property \"constructor\"\r\n      const prototype = getPrototypeOf(value);\r\n      if (prototype === Object.prototype || prototype === null) {\r\n        // value is plain Object\r\n        return prepareDeepObject(value, expose);\r\n      }\r\n    } else if (value.constructor === Object) {\r\n      // value is plain Object\r\n      return prepareDeepObject(value, expose);\r\n    }\r\n  }\r\n  // value is primitive, function or class instance\r\n  return value;\r\n}\r\n\r\nexport function prepareDeepObject(instance: Object, expose: boolean) {\r\n  if (!hasOwnProperty(instance, PATCHED_KEY)) {\r\n    // mark instance as ObservableObject\r\n    defineProperty(instance, PATCHED_KEY, {\r\n      value: true,\r\n    });\r\n    // define deep observable properties\r\n    objectForEach(instance, (key, value) => {\r\n      if (isArray(value)) {\r\n        defineObservableArray(instance, key, value, true, expose);\r\n      } else {\r\n        defineObservableProperty(instance, key, value, true, expose);\r\n      }\r\n    });\r\n  }\r\n  return instance;\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n */\r\nimport * as ko from \"knockout\";\r\nimport { ArrayPrototype, arraySlice, defineProperty, hasOwnProperty, isArray, PATCHED_KEY } from \"./common-functions\";\r\nimport { prepareDeepValue } from \"./observable-property\";\r\nimport { applyExtenders } from \"./property-extenders\";\r\n\r\ntype ObsArray = ko.ObservableArray<any> & { [fnName: string]: Function };\r\n\r\nconst deepArrayMethods = [\"pop\", \"reverse\", \"shift\", \"sort\"];\r\nconst allArrayMethods = [...deepArrayMethods, \"push\", \"splice\", \"unshift\"];\r\n\r\nconst deepObservableArrayMethods = [\"remove\", \"removeAll\", \"destroy\", \"destroyAll\", \"replace\", \"subscribe\"];\r\nconst allObservableArrayMethods = [...deepObservableArrayMethods, \"replace\"];\r\n\r\nconst allMethods = [...allArrayMethods, ...allObservableArrayMethods, \"mutate\", \"set\"];\r\n\r\nexport function defineObservableArray(\r\n  instance: Object, key: string | symbol, value: any[], deep: boolean, expose: boolean,\r\n) {\r\n  const obsArray = applyExtenders(instance, key, ko.observableArray()) as ObsArray;\r\n\r\n  let insideObsArray = false;\r\n\r\n  defineProperty(instance, key, {\r\n    enumerable: true,\r\n    get: obsArray,\r\n    set: setter,\r\n  });\r\n  if (expose) {\r\n    defineProperty(instance, \"_\" + String(key), {\r\n      value: obsArray,\r\n    });\r\n  }\r\n\r\n  setter(value);\r\n\r\n  function setter(newValue: any[]) {\r\n    const lastValue = obsArray.peek();\r\n    // if we got new value\r\n    if (lastValue !== newValue) {\r\n      if (isArray(lastValue)) {\r\n        // if lastValue array methods were already patched\r\n        if (hasOwnProperty(lastValue, PATCHED_KEY)) {\r\n          delete lastValue[PATCHED_KEY];\r\n          // clear patched array methods on lastValue (see unit tests)\r\n          allMethods.forEach((fnName) => {\r\n            delete lastValue[fnName];\r\n          });\r\n        }\r\n      }\r\n      if (isArray(newValue)) {\r\n        // if new value array methods were already connected with another @observable\r\n        if (hasOwnProperty(newValue, PATCHED_KEY)) {\r\n          // clone new value to prevent corruption of another @observable (see unit tests)\r\n          newValue = [...newValue];\r\n        }\r\n        // if deep option is set\r\n        if (deep) {\r\n          // make all array items deep observable\r\n          for (let i = 0; i < newValue.length; ++i) {\r\n            newValue[i] = prepareDeepValue(newValue[i], expose);\r\n          }\r\n        }\r\n        // mark instance as ObservableArray\r\n        defineProperty(newValue, PATCHED_KEY, {\r\n          value: true,\r\n        });\r\n        // call ko.observableArray.fn[fnName] instead of Array.prototype[fnName]\r\n        patchArrayMethods(newValue);\r\n      }\r\n    }\r\n    // update obsArray contents\r\n    insideObsArray = true;\r\n    obsArray(newValue);\r\n    insideObsArray = false;\r\n  }\r\n\r\n  function patchArrayMethods(array: any[]) {\r\n    const arrayMethods = deep ? deepArrayMethods : allArrayMethods;\r\n\r\n    arrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n      value() {\r\n        if (insideObsArray) {\r\n          return ArrayPrototype[fnName].apply(array, arguments);\r\n        }\r\n        insideObsArray = true;\r\n        const result = obsArray[fnName].apply(obsArray, arguments);\r\n        insideObsArray = false;\r\n        return result;\r\n      },\r\n    }));\r\n\r\n    const observableArrayMethods = deep ? deepObservableArrayMethods : allObservableArrayMethods;\r\n\r\n    observableArrayMethods.forEach((fnName) => defineProperty(array, fnName, {\r\n      value() {\r\n        insideObsArray = true;\r\n        const result = obsArray[fnName].apply(obsArray, arguments);\r\n        insideObsArray = false;\r\n        return result;\r\n      },\r\n    }));\r\n\r\n    if (deep) {\r\n      defineProperty(array, \"push\", {\r\n        value() {\r\n          if (insideObsArray) {\r\n            return ArrayPrototype.push.apply(array, arguments);\r\n          }\r\n          const args = arraySlice(arguments);\r\n          for (let i = 0; i < args.length; ++i) {\r\n            args[i] = prepareDeepValue(args[i], expose);\r\n          }\r\n          insideObsArray = true;\r\n          const result = obsArray.push.apply(obsArray, args);\r\n          insideObsArray = false;\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"unshift\", {\r\n        value() {\r\n          if (insideObsArray) {\r\n            return ArrayPrototype.unshift.apply(array, arguments);\r\n          }\r\n          const args = arraySlice(arguments);\r\n          for (let i = 0; i < args.length; ++i) {\r\n            args[i] = prepareDeepValue(args[i], expose);\r\n          }\r\n          insideObsArray = true;\r\n          const result = obsArray.unshift.apply(obsArray, args);\r\n          insideObsArray = false;\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"splice\", {\r\n        value() {\r\n          if (insideObsArray) {\r\n            return ArrayPrototype.splice.apply(array, arguments);\r\n          }\r\n\r\n          let result: any[];\r\n\r\n          insideObsArray = true;\r\n          switch (arguments.length) {\r\n            case 0:\r\n            case 1:\r\n            case 2: {\r\n              result = obsArray.splice.apply(obsArray, arguments);\r\n              break;\r\n            }\r\n            case 3: {\r\n              result = obsArray.splice(\r\n                arguments[0], arguments[1], prepareDeepValue(arguments[2], expose),\r\n              );\r\n              break;\r\n            }\r\n            default: {\r\n              const args = arraySlice(arguments);\r\n              for (let i = 2; i < args.length; ++i) {\r\n                args[i] = prepareDeepValue(args[i], expose);\r\n              }\r\n              result = obsArray.splice.apply(obsArray, arguments);\r\n              break;\r\n            }\r\n          }\r\n          insideObsArray = false;\r\n\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"replace\", {\r\n        value(oldItem: any, newItem: any) {\r\n          insideObsArray = true;\r\n          const result = obsArray.replace(oldItem, prepareDeepValue(newItem, expose));\r\n          insideObsArray = false;\r\n          return result;\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"mutate\", {\r\n        value(mutator: (array?: any[]) => void) {\r\n          const nativeArray = obsArray.peek();\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueWillMutate as Function)();\r\n          mutator(nativeArray);\r\n          for (let i = 0; i < nativeArray.length; ++i) {\r\n            nativeArray[i] = prepareDeepValue(nativeArray[i], expose);\r\n          }\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueHasMutated as Function)();\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"set\", {\r\n        value(index: number, newItem: any) {\r\n          return obsArray.splice(index, 1, prepareDeepValue(newItem, expose))[0];\r\n        },\r\n      });\r\n    } else {\r\n      defineProperty(array, \"mutate\", {\r\n        value(mutator: (array?: any[]) => void) {\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueWillMutate as Function)();\r\n          mutator(obsArray.peek());\r\n          // it is defined for ko.observableArray\r\n          (obsArray.valueHasMutated as Function)();\r\n        },\r\n      });\r\n\r\n      defineProperty(array, \"set\", {\r\n        value(index: number, newItem: any) {\r\n          return obsArray.splice(index, 1, newItem)[0];\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2016-2018 Dmitry Panyushkin\r\n * Available under MIT license\r\n * Version: 2.0.0\r\n */\r\nimport * as ko from \"knockout\";\r\nimport {\r\n  defineProperty, extendObject, getOwnPropertyDescriptor, hasOwnProperty, isArray, PATCHED_KEY, SUBSCRIPTIONS_KEY,\r\n} from \"./common-functions\";\r\nimport { defineEventProperty } from \"./event-property\";\r\nimport { defineObservableArray } from \"./observable-array\";\r\nimport { defineObservableProperty } from \"./observable-property\";\r\nimport { applyExtenders, defineExtenders } from \"./property-extenders\";\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden ko.observableArray will be created\r\n */\r\nexport function observable(options: { deep?: boolean, expose?: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow) ko.observableArray will be created\r\n */\r\nexport function observable(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observable with ES6 getter and setter for it\r\n * If initialized by Array then hidden (shallow or deep) ko.observableArray will be created\r\n */\r\nexport function observable(prototypeOrOptions: any, key?: any) {\r\n  observableArrayOption = false;\r\n  deepObservableOption = false;\r\n  exposeObservableOption = false;\r\n  if (arguments.length === 1) {\r\n    deepObservableOption = prototypeOrOptions.deep;\r\n    exposeObservableOption = prototypeOrOptions.expose;\r\n    return observableDecorator;\r\n  }\r\n  return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(options: { deep?: boolean, expose?: boolean }): PropertyDecorator;\r\n/**\r\n * Property decorator that creates hidden (shallow) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototype: Object, key: string | symbol): void;\r\n/**\r\n * Property decorator that creates hidden (shallow or deep) ko.observableArray with ES6 getter and setter for it\r\n */\r\nexport function observableArray(prototypeOrOptions: any, key?: any) {\r\n  observableArrayOption = true;\r\n  deepObservableOption = false;\r\n  exposeObservableOption = false;\r\n  if (arguments.length === 1) {\r\n    deepObservableOption = prototypeOrOptions.deep;\r\n    exposeObservableOption = prototypeOrOptions.expose;\r\n    return observableDecorator;\r\n  }\r\n  return observableDecorator(prototypeOrOptions, key);\r\n}\r\n\r\n// observableDecorator options\r\nlet observableArrayOption: boolean;\r\nlet deepObservableOption: boolean;\r\nlet exposeObservableOption: boolean;\r\n\r\nfunction observableDecorator(prototype: Object, propKey: string | symbol) {\r\n  const array = observableArrayOption;\r\n  const deep = deepObservableOption;\r\n  const expose = exposeObservableOption;\r\n  defineProperty(prototype, propKey, {\r\n    get() {\r\n      throw new Error(\"@observable property '\" + String(propKey) + \"' was not initialized\");\r\n    },\r\n    set(this: Object, value: any) {\r\n      if (array || isArray(value)) {\r\n        defineObservableArray(this, propKey, value, deep, expose);\r\n      } else {\r\n        defineObservableProperty(this, propKey, value, deep, expose);\r\n      }\r\n    },\r\n  });\r\n}\r\n\r\nexport interface ObservableArray<T> extends Array<T> {\r\n  replace(oldItem: T, newItem: T): void;\r\n\r\n  remove(item: T): T[];\r\n  remove(removeFunction: (item: T) => boolean): T[];\r\n\r\n  removeAll(): T[];\r\n  removeAll(items: T[]): T[];\r\n\r\n  destroy(item: T): void;\r\n  destroy(destroyFunction: (item: T) => boolean): void;\r\n\r\n  destroyAll(): void;\r\n  destroyAll(items: T[]): void;\r\n\r\n  subscribe(callback: (val: T[]) => void): ko.Subscription;\r\n  subscribe(callback: (val: T[]) => void, callbackTarget: any): ko.Subscription;\r\n  subscribe(callback: (val: any[]) => void, callbackTarget: any, event: string): ko.Subscription;\r\n\r\n  /**\r\n   * Run mutator function that can write to array at some index (`array[index] = value;`)\r\n   * Then notify about observableArray changes\r\n   */\r\n  mutate(mutator: (arrayValue: T[]) => void): void;\r\n\r\n  /**\r\n   * Replace value at some index and return old value\r\n   */\r\n  set(index: number, value: T): T;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(options: { pure: boolean }): PropertyDecorator;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototype: Object, key: string | symbol, desc?: PropertyDescriptor): PropertyDescriptor;\r\n/**\r\n * Accessor decorator that wraps ES6 getter to hidden ko.computed or ko.pureComputed\r\n *\r\n * Setter is not wrapped to hidden ko.pureComputed and stays unchanged\r\n *\r\n * But we can still extend getter @computed by extenders like { rateLimit: 500 }\r\n */\r\nexport function computed(prototypeOrOptinos: any, key?: any, propDesc?: any): any {\r\n  computedDecoratorOptions = { pure: true };\r\n\r\n  if (arguments.length === 1) {\r\n    computedDecoratorOptions = prototypeOrOptinos;\r\n    return computedDecorator;\r\n  }\r\n  return computedDecorator(prototypeOrOptinos, key, propDesc);\r\n}\r\n\r\n// computedDecorator options\r\nlet computedDecoratorOptions: { pure: boolean };\r\n\r\nfunction computedDecorator(prototype: Object, propKey: string | symbol, desc: PropertyDescriptor) {\r\n  const options = computedDecoratorOptions;\r\n  const { get, set } = desc || (desc = getOwnPropertyDescriptor(prototype, propKey));\r\n  if (!get) {\r\n    throw new Error(\"@computed property '\" + String(propKey) + \"' has no getter\");\r\n  }\r\n  desc.get = function (this: Object) {\r\n    const koComputed = applyExtenders(this, propKey, ko.computed(get, this, options));\r\n    defineProperty(this, propKey, {\r\n      get: koComputed,\r\n      // tslint:disable-next-line:object-literal-shorthand\r\n      set: set,\r\n    });\r\n    return koComputed();\r\n  };\r\n  return desc;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extenders: Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n */\r\nexport function extend(extendersFactory: () => Object): PropertyDecorator;\r\n/**\r\n * Apply extenders to decorated @observable\r\n * @extendersOrFactory { Object | Function } Knockout extenders definition or factory that produces definition\r\n */\r\nexport function extend(extendersOrFactory: Object | Function) {\r\n  return function (prototype: Object, key: string | symbol) {\r\n    defineExtenders(prototype, key, extendersOrFactory);\r\n  };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\nexport type ComponentConstructor = new (\r\n  params?: any,\r\n  element?: Node,\r\n  templateNodes?: Node[],\r\n) => any;\r\n\r\nexport type ComponentDecorator = (constructor: ComponentConstructor) => void;\r\n\r\nexport type TemplateConfig = (\r\n  string\r\n  | Node[]\r\n  | DocumentFragment\r\n  | { require: string }\r\n  | { element: string | Node }\r\n);\r\n\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n  name: string,\r\n  options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n  name: string,\r\n  template: TemplateConfig,\r\n  options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n */\r\nexport function component(\r\n  name: string,\r\n  template: TemplateConfig,\r\n  styles: string | string[],\r\n  options?: Object,\r\n): ComponentDecorator;\r\n/**\r\n * Register Knockout component by decorating ViewModel class\r\n * @param name {String} Name of component\r\n * @param template {Any} Knockout template definition\r\n * @param styles {Any} Ignored parameter (used for `require()` styles by webpack etc.)\r\n * @param options {Object} Another options that passed directly to `ko.components.register()`\r\n */\r\nexport function component(\r\n  name: string,\r\n  template?: any,\r\n  styles?: any,\r\n  options?: Object,\r\n) {\r\n  if (options === void 0) {\r\n    if (styles === void 0) {\r\n      if (typeof template === \"object\"\r\n        && template.constructor === Object\r\n        && !(\"require\" in template)\r\n        && !(\"element\" in template)\r\n      ) {\r\n        options = template;\r\n        template = void 0;\r\n      }\r\n    } else if (typeof styles === \"object\") {\r\n      options = styles;\r\n      styles = void 0;\r\n    }\r\n  }\r\n\r\n  return function (constructor: ComponentConstructor) {\r\n    ko.components.register(name, extendObject({\r\n      viewModel: constructor.length < 2 ? constructor : {\r\n        createViewModel(params: any, {\r\n          element, templateNodes,\r\n        }: {\r\n            element: Node, templateNodes: Node[],\r\n          }) {\r\n          return new constructor(params, element, templateNodes);\r\n        },\r\n      },\r\n      template: template || \"<!---->\",\r\n      synchronous: true,\r\n    }, options as Object));\r\n  };\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Like https://github.com/jayphelps/core-decorators.js @autobind but less smart and complex\r\n * Do NOT use with ES6 inheritance!\r\n */\r\nexport function autobind(prototype: Object, key: string | symbol, desc?: PropertyDescriptor) {\r\n  const { value, configurable, enumerable } = desc || (desc = getOwnPropertyDescriptor(prototype, key));\r\n  return {\r\n    // tslint:disable-next-line:object-literal-shorthand\r\n    configurable: configurable,\r\n    // tslint:disable-next-line:object-literal-shorthand\r\n    enumerable: enumerable,\r\n    get(this: Object) {\r\n      if (this === prototype) {\r\n        return value;\r\n      }\r\n      const bound = value.bind(this);\r\n      defineProperty(this, key, {\r\n        value: bound,\r\n      });\r\n      return bound;\r\n    },\r\n  } as PropertyDescriptor;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Define hidden ko.subscribable, that notifies subscribers when decorated method is invoked\r\n */\r\nexport function event(prototype: Object, key: string | symbol) {\r\n  defineProperty(prototype, key, {\r\n    get(this: Object) {\r\n      return defineEventProperty(this, key);\r\n    },\r\n  });\r\n}\r\n\r\nexport type EventType = Function & {\r\n  subscribe(callback: Function): ko.Subscription;\r\n};\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n  dependencyOrEvent: () => T,\r\n  callback: (value: T) => void,\r\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n): ko.Subscription;\r\n/**\r\n * Subscribe callback to `@observableArray` dependency \"arrayChange\" event\r\n */\r\nexport function subscribe<T>(\r\n  dependency: () => T[],\r\n  callback: (value: {\r\n    status: \"added\" | \"deleted\";\r\n    value: T;\r\n    index: number;\r\n  }[]) => void,\r\n  options: { once?: boolean, event: \"arrayChange\" },\r\n): ko.Subscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T>(\r\n  event: (arg: T) => void,\r\n  callback: (arg: T) => void,\r\n  options?: { once?: boolean },\r\n): ko.Subscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2>(\r\n  event: (arg1: T1, arg2: T2) => void,\r\n  callback: (arg1: T1, arg2: T2) => void,\r\n  options?: { once?: boolean },\r\n): ko.Subscription;\r\n/**\r\n * Subscribe callback to some `@event` property\r\n */\r\nexport function subscribe<T1, T2, T3>(\r\n  event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n  callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n  options?: { once?: boolean },\r\n): ko.Subscription;\r\n/**\r\n * Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event`\r\n */\r\nexport function subscribe(\r\n  dependencyOrEvent: Function,\r\n  callback: (...args: any[]) => void,\r\n  options?: { once?: boolean, event?: \"change\" | \"beforeChange\" | \"arrayChange\" },\r\n) {\r\n  const once = options && options.once || false;\r\n\r\n  if (hasOwnProperty(dependencyOrEvent, \"subscribe\")) {\r\n    // overload: subscribe to @event property\r\n    const eventFunc = dependencyOrEvent as EventType;\r\n\r\n    if (once) {\r\n      const subscription = eventFunc.subscribe(function () {\r\n        subscription.dispose();\r\n        callback.apply(null, arguments);\r\n      });\r\n      return subscription;\r\n    } else {\r\n      return eventFunc.subscribe(callback);\r\n    }\r\n  } else {\r\n    // overload: subscribe to @observable or @computed\r\n    const eventFunc = options && options.event || \"change\";\r\n\r\n    let handler: (value: any) => void;\r\n    let subscription: ko.Subscription;\r\n\r\n    if (once) {\r\n      handler = function () {\r\n        subscription.dispose();\r\n        callback.apply(null, arguments);\r\n      };\r\n    } else {\r\n      handler = callback;\r\n    }\r\n\r\n    if (eventFunc === \"arrayChange\") {\r\n      const obsArray = dependencyOrEvent() as ObservableArray<any>;\r\n\r\n      if (isArray(obsArray) && hasOwnProperty(obsArray, PATCHED_KEY)) {\r\n        subscription = obsArray.subscribe(handler, null, eventFunc);\r\n      } else {\r\n        throw new Error(\"Can not subscribe to 'arrayChange' because dependency is not an 'observableArray'\");\r\n      }\r\n    } else {\r\n      const koComputed = ko.computed(dependencyOrEvent as () => any).extend({ notify: \"always\" });\r\n\r\n      subscription = koComputed.subscribe(handler, null, eventFunc);\r\n\r\n      const originalDispose = subscription.dispose;\r\n      // dispose hidden computed with subscription\r\n      subscription.dispose = function (this: ko.Subscription) {\r\n        originalDispose.call(this);\r\n        koComputed.dispose();\r\n      };\r\n    }\r\n    return subscription;\r\n  }\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol): any;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap<T>(instance: Object, key: string | symbol): ko.Observable<T>;\r\n/**\r\n * Get internal ko.observable() for object property decodated by @observable\r\n */\r\nexport function unwrap(instance: Object, key: string | symbol) {\r\n  if (!hasOwnProperty(instance, key)) {\r\n    // invoke getter on instance.__proto__ that defines property on instance\r\n    // tslint:disable-next-line:no-unused-expression\r\n    instance[key];\r\n  }\r\n  return getOwnPropertyDescriptor(instance, key).get;\r\n}\r\n\r\n/*---------------------------------------------------------------------------*/\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport interface Disposable {\r\n  /** Dispose all subscriptions from this class */\r\n  dispose(): void;\r\n\r\n  /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` property */\r\n  subscribe<T>(\r\n    dependencyOrEvent: () => T,\r\n    callback: (value: T) => void,\r\n    options?: { once?: boolean, event?: \"change\" | \"beforeChange\" },\r\n  ): ko.Subscription;\r\n  /** Subscribe callback to `@observableArray` dependency \"arrayChange\" event */\r\n  subscribe<T>(\r\n    dependency: () => T[],\r\n    callback: (value: {\r\n      status: \"added\" | \"deleted\";\r\n      value: T;\r\n      index: number;\r\n    }[]) => void,\r\n    options: { once?: boolean, event: \"arrayChange\" },\r\n  ): ko.Subscription;\r\n  /** Subscribe callback to some `@event` property */\r\n  subscribe<T>(\r\n    event: (arg: T) => void,\r\n    callback: (arg: T) => void,\r\n    options?: { once?: boolean },\r\n  ): ko.Subscription;\r\n  /** Subscribe callback to some `@event` property */\r\n  subscribe<T1, T2>(\r\n    event: (arg1: T1, arg2: T2) => void,\r\n    callback: (arg1: T1, arg2: T2) => void,\r\n    options?: { once?: boolean },\r\n  ): ko.Subscription;\r\n  /** Subscribe callback to some `@event` property */\r\n  subscribe<T1, T2, T3>(\r\n    event: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    callback: (arg1: T1, arg2: T2, arg3: T3, ...args: any[]) => void,\r\n    options?: { once?: boolean },\r\n  ): ko.Subscription;\r\n\r\n  /** Get internal ko.observable() for class property decodated by `@observable` */\r\n  unwrap(key: string | symbol): any;\r\n  /** Get internal ko.observable() for class property decodated by `@observable` */\r\n  unwrap<T>(key: string | symbol): ko.Observable<T>;\r\n}\r\n\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n */\r\nexport function Disposable(): new () => Disposable;\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends Function>(\r\n  // tslint:disable-next-line:variable-name\r\n  Base: T,\r\n): (new (...args: any[]) => Disposable) & T;\r\n/**\r\n * Mixin which add `subscribe()` instance method and implement `dispose()` method,\r\n * that disposes all subscription created by `subscribe()`\r\n * @param Base {Function} Base class to extend\r\n */\r\nexport function Disposable<T extends new (...args: any[]) => any>(\r\n  // tslint:disable-next-line:variable-name\r\n  Base?: T,\r\n) {\r\n  if (typeof Base === \"undefined\") {\r\n    Base = class { } as T;\r\n  }\r\n  return class extends Base {\r\n    /** Dispose all subscriptions from this class */\r\n    dispose() {\r\n      const subscriptions: ko.Subscription[] = this[SUBSCRIPTIONS_KEY as any];\r\n      if (subscriptions) {\r\n        subscriptions.forEach((subscription) => {\r\n          subscription.dispose();\r\n        });\r\n        delete this[SUBSCRIPTIONS_KEY as any];\r\n      }\r\n    }\r\n\r\n    /** Subscribe callback to `@observable` or `@computed` dependency changes or to some `@event` */\r\n    subscribe() {\r\n      const subscription: ko.Subscription = subscribe.apply(null, arguments);\r\n      const subscriptions: ko.Subscription[] = this[SUBSCRIPTIONS_KEY as any] ||\r\n        (this[SUBSCRIPTIONS_KEY as any] = []);\r\n      subscriptions.push(subscription);\r\n      return subscription;\r\n    }\r\n\r\n    /** Get internal ko.observable() for class property decodated by `@observable` */\r\n    unwrap(key: string) {\r\n      return unwrap(this, key);\r\n    }\r\n  };\r\n}\r\n"],"names":["ko.utils","subscribable","ko.subscribable","ko.observable","ko.observableArray","ko.computed","ko.components","tslib_1.__extends"],"mappings":"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"}